package parser

import "github.com/denisdubochevalier/lambdac/lexer"

// NodeType serves as an alias for lexer.TokenType and is utilized to classify
// the syntactic role of an ASTNode within the Abstract Syntax Tree (AST). The
// aliasing aims to create a semantically meaningful distinction in the context
// of the AST, making the code more readable and self-explanatory.
//
// By classifying ASTNodes using NodeType, it becomes considerably more
// straightforward to process the AST in later stages of the compilation
// process, such as during syntactic validation, optimization, or code
// generation. NodeType effectively serves as a tag that designates the
// syntactic role an ASTNode plays in the representation of the source code.
//
// Given that NodeType is an alias for lexer.TokenType, it inherits all the
// token types defined in the lexer. This preserves a degree of uniformity
// across the various phases of the compilation process, from lexical analysis
// to AST construction, making the NodeType intrinsically aligned with the
// token types generated by the lexer.
//
// Example usage:
//
//	nodeType := lexer.IDENT // lexer.TokenType
//	astNode := ASTNode{NodeType: NodeType, Token: someToken}
type NodeType = lexer.TokenType
